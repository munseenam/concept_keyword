package org.example;

import org.junit.jupiter.api.Test;

import java.util.Scanner;


import static org.junit.jupiter.api.Assertions.*;

class checkKeywordTest {

    checkKeyword word=new  checkKeyword();

    @Test
    public void ToTestKeywordBreak() {


        String val=word.checkword("break");
        String output= "break is a keyword.	It helps you to Breaks out of a loop or a switch block";
        assertEquals(output,val);


    }

    @Test
    public void ToTestKeywordCase() {


        String val=word.checkword("case");
        String output= "case is a keyword.\tThe case keyword marks a block of code in a switch statement.";
        assertEquals(output,val);


    }

    @Test
    public void ToTestKeywordContinue() {


        String val=word.checkword("continue");
        String output= "continue is a keyword.\t It helps to continues to the next iteration of a loop";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordDefault() {


        String val=word.checkword("default");
        String output= "default is a keyword.\t It helps to Specifies the default block of code in a switch statement";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordElse() {


        String val=word.checkword("else");
        String output= "else is a keyword.\t It is Used in conditional statements";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordFor() {


        String val=word.checkword("for");
        String output="for is a keyword.\tIt is used while creating a for loop";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordIf() {


        String val=word.checkword("if");
        String output= "if is a keyword.\t It is used while creating a conditional statement.";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordReturn() {


        String val=word.checkword("return");
        String output="return is a keyword.\t\tFinished the execution of a method, and can be used to return a value from a method";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordVar() {


        String val=word.checkword("var");
        String output=  "var is a keyword.\t \tDeclares a variable. New in Java 10";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordAbstract() {


        String val=word.checkword("abstract");
        String output= "abstract is a keyword.\t A non-access modifier. Used for classes and methods: An abstract class cannot be used to create objects (to access it, it must be inherited from another class). An abstract method can only be used in an abstract class,and it does not have a body. The body is provided by the subclass (inherited from)";

        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordAssert() {


        String val=word.checkword("assert");
        String output= "assert is a keyword.\tUsed For debugging.";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordBoolean() {


        String val=word.checkword("boolean");
        String output= "boolean is a keyword.\tA data type that can only store true and false values";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordByte() {


        String val=word.checkword("byte");
        String output= "byte is a keyword.\t \tA data type that can store whole numbers from -128 and 127";;
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordcatch() {


        String val=word.checkword("catch");
        String output=  "catch is a keyword.\t Catches exceptions generated by try statements";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordChar() {


        String val=word.checkword("char");
        String output= "char is a keyword.\t \tA data type that is used to store a single character";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordClass() {


        String val=word.checkword("class");
        String output= "class is a keyword.\t \tDefines a class";
        assertEquals(output,val);


    }

    @Test
    public void ToTestKeywordDo() {


        String val=word.checkword("do");
        String output="do is a keyword.\tUsed together with while to create a do-while loop";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordDouble() {


        String val=word.checkword("double");
        String output= "double is a keyword.\tA data type that can store whole numbers from 1.7e−308 to 1.7e+308";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordEnum() {


        String val=word.checkword("enum");
        String output= "enum is a keyword.\tDeclares an enumerated (unchangeable) type";;
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordSynchronized() {


        String val=word.checkword("synchronized");
        String output= "synchronized is a keyword.\tA non-access modifier, which specifies that methods can only be accessed by one thread at a time";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordThis() {


        String val=word.checkword("this");
        String output= "this is a keyword.\t\tRefers to the current object in a method or constructor";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordThrow() {


        String val=word.checkword("throw");
        String output= "throw is a keyword.\t\tCreates a custom error";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordThrows() {


        String val=word.checkword("throws");
        String output= "throws is a keyword.\tIndicates what exceptions may be thrown by a method";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordTransient() {


        String val=word.checkword("transient");
        String output= "transient is a keyword.\t	A non-accesss modifier, which specifies that an attribute is not part of an object's persistent state";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordTry() {


        String val=word.checkword("try");
        String output="try is a keyword.\tCreates a try...catch statement";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordVoid() {


        String val=word.checkword("void");
        String output= "void is a keyword.\tSpecifies that a method should not have a return value";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordVolatile() {


        String val=word.checkword("volatile");
        String output= "volatile is a keyword.\tIndicates that an attribute is not cached thread-locally, and is always read from the \"main memory\"";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordWhile() {


        String val=word.checkword("while");
        String output=  "while is a keyword.\t\tCreates a while loop";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordExports() {


        String val=word.checkword("exports");
        String output=  "exports is a keyword.\tExports a package with a module. New in Java 9";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordExtends() {


        String val=word.checkword("extends");
        String output= "extends is a keyword.\tExtends a class (indicates that a class is inherited from another class)";;
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordFinal() {


        String val=word.checkword("final");
        String output= "final is a keyword.\tA non-access modifier used for classes, attributes and methods, which makes them non-changeable (impossible to inherit or override)";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordFinally() {


        String val=word.checkword("finally");
        String output= "finally is a keyword.\tUsed with exceptions, a block of code that will be executed no matter if there is an exception or not";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordFloat() {


        String val=word.checkword("float");
        String output= "float is a keyword.\tA data type that can store whole numbers from 3.4e−038 to 3.4e+038";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordImplements() {


        String val=word.checkword("implements");
        String output= "implements is a keyword.\tImplements an interface";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordImport() {


        String val=word.checkword("import");
        String output= "import is a keyword.\t\tUsed to import a package, class or interface";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordInstanceof() {


        String val=word.checkword("instanceof");
        String output= "instanceof is a keyword.\tChecks whether an object is an instance of a specific class or an interface";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordInt() {


        String val=word.checkword("int");
        String output= "int is a keyword.\t	A data type that can store whole numbers from -2147483648 to 2147483647";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordInterface() {


        String val=word.checkword("interface");
        String output= "interface is a keyword.\tUsed to declare a special type of class that only contains abstract methods";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordLong() {


        String val=word.checkword("long");
        String output="long is a keyword.\t A data type that can store whole numbers from -9223372036854775808 to 9223372036854775808";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordModule() {


        String val=word.checkword("module");
        String output= "module is a keyword.\t\tDeclares a module. New in Java 9";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordNative() {


        String val=word.checkword("native");
        String output= "native is a keyword.\t Specifies that a method is not implemented in the same Java source file (but in another language)";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordNew() {


        String val=word.checkword("new");
        String output="new is a keyword.\t\tCreates new objects";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordPackage() {


        String val=word.checkword("package");
        String output= "package is a keyword.\t\tDeclares a package";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordPrivate() {


        String val=word.checkword("private");
        String output= "private is a keyword.\t\tAn access modifier used for attributes, methods and constructors, making them only accessible within the declared class";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordProtected() {


        String val=word.checkword("protected");
        String output= "protected is a keyword.\tAn access modifier used for attributes, methods and constructors, making them accessible in the same package and subclasses";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordPublic() {


        String val=word.checkword("public");
        String output=  "public is a keyword.\tAn access modifier used for classes, attributes, methods and constructors, making them accessible by any other class";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordRequires() {


        String val=word.checkword("requires");
        String output= "requires is a keyword.\t\tSpecifies required libraries inside a module. New in Java 9";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordShort() {


        String val=word.checkword("short");
        String output= "short is a keyword.\tA data type that can store whole numbers from -32768 to 32767";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordStatic() {


        String val=word.checkword("static");
        String output= "static is a keyword.\tA non-access modifier used for methods and attributes. Static methods/attributes can be accessed without creating an object of a class";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordStrictfb() {


        String val=word.checkword("strictfb");
        String output= "strictfb is a keyword.\tRestrict the precision and rounding of floating point calculations";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordSuper() {


        String val=word.checkword("super");
        String output=  "super is a keyword.\tRefers to superclass (parent) objects";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordSwitch() {


        String val=word.checkword("switch");
        String output= "switch is a keyword.\tSelects one of many code blocks to be executed";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordTrue() {


        String val=word.checkword("true");
        String output= "true is not a keyword.\t true, false, and null are not keywords, but they are literals and reserved words that cannot be used as identifiers.";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordFalse() {


        String val=word.checkword("false");
        String output= "false is not a keyword.\ttrue, false, and null are not keywords, but they are literals and reserved words that cannot be used as identifiers.";
        assertEquals(output,val);


    }
    @Test
    public void ToTestKeywordNull() {


        String val=word.checkword("null");
        String output= "null is not a keyword.\ttrue, false, and null are not keywords, but they are literals and reserved words that cannot be used as identifiers.";
        assertEquals(output,val);


    }
@Test
    public void ToTestANonKeyWord() {


        String val=word.checkword("hiii");
        String output= "hiii is not a keyword";
        assertEquals(output,val);


    }

}


